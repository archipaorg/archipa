/** Declaration file generated by dts-gen */

export const disp: {
    error: string;
    http: string;
    info: string;
    notice: string;
    silent: string;
    silly: string;
    timing: string;
    verbose: string;
    warn: string;
};

export const domain: any;

export const headingStyle: {
    bg: string;
    fg: string;
};

export const level: string;

export const levels: {
    error: number;
    http: number;
    info: number;
    notice: number;
    silent: number;
    silly: number;
    timing: number;
    verbose: number;
    warn: number;
};

export const maxRecordSize: number;

export const prefixStyle: {
    fg: string;
};

export const progressEnabled: boolean;

export const record: any[];

export const style: {
    error: {
        bg: string;
        fg: string;
    };
    http: {
        bg: string;
        fg: string;
    };
    info: {
        fg: string;
    };
    notice: {
        bg: string;
        fg: string;
    };
    silent: any;
    silly: {
        inverse: boolean;
    };
    timing: {
        bg: string;
        fg: string;
    };
    verbose: {
        bg: string;
        fg: string;
    };
    warn: {
        bg: string;
        fg: string;
    };
};

export function addLevel(lvl: any, n: any, style: any, disp: any, ...args: any[]): any;

export function addListener(type: any, listener: any): any;

export function clearProgress(cb: any): any;

export function disableColor(): void;

export function disableProgress(): void;

export function disableUnicode(): void;

export function emit(type: any, ...args: any[]): any;

export function emitLog(m: any): void;

export function enableColor(): void;

export function enableProgress(): void;

export function enableUnicode(): void;

export function error(): any;

export function eventNames(): any;

export function getMaxListeners(): any;

export function http(): any;

export function info(): any;

export function listenerCount(type: any): any;

export function listeners(type: any): any;

export function log(p0: any, p1: any, p2: any): any;

export function newGroup(...args: any[]): any;

export function newItem(...args: any[]): any;

export function newStream(...args: any[]): any;

export function notice(): any;

export function on(type: any, listener: any): any;

export function once(type: any, listener: any): any;

export function pause(): void;

export function prependListener(type: any, listener: any): any;

export function prependOnceListener(type: any, listener: any): any;

export function removeAllListeners(type: any, ...args: any[]): any;

export function removeListener(type: any, listener: any): any;

export function resume(): void;

export function setGaugeTemplate(template: any): void;

export function setGaugeThemeset(themes: any): void;

export function setMaxListeners(n: any): any;

export function showProgress(p0: any, p1: any): any;

export function silent(): any;

export function silly(): any;

export function timing(): any;

export function useColor(): any;

export function verbose(): any;

export function warn(): any;

export function write(msg: any, style: any): void;

export namespace addLevel {
    const prototype: {
    };

}

export namespace addListener {
    const prototype: {
    };

}

export namespace clearProgress {
    const prototype: {
    };

}

export namespace disableColor {
    const prototype: {
    };

}

export namespace disableProgress {
    const prototype: {
    };

}

export namespace disableUnicode {
    const prototype: {
    };

}

export namespace emit {
    const prototype: {
    };

}

export namespace emitLog {
    const prototype: {
    };

}

export namespace enableColor {
    const prototype: {
    };

}

export namespace enableProgress {
    const prototype: {
    };

}

export namespace enableUnicode {
    const prototype: {
    };

}

export namespace eventNames {
    const prototype: {
    };

}

export namespace gauge {
    function disable(): void;

    function enable(): void;

    function getWidth(): any;

    function hide(cb: any): any;

    function isEnabled(): any;

    function pulse(subsection: any): void;

    function setTemplate(template: any): void;

    function setTheme(theme: any): void;

    function setThemeset(themes: any): void;

    function setWriteTo(writeTo: any, tty: any): void;

    function show(section: any, completed: any): void;

    namespace disable {
        const prototype: {
        };

    }

    namespace enable {
        const prototype: {
        };

    }

    namespace getWidth {
        const prototype: {
        };

    }

    namespace hide {
        const prototype: {
        };

    }

    namespace isEnabled {
        const prototype: {
        };

    }

    namespace pulse {
        const prototype: {
        };

    }

    namespace setTemplate {
        const prototype: {
        };

    }

    namespace setTheme {
        const prototype: {
        };

    }

    namespace setThemeset {
        const prototype: {
        };

    }

    namespace setWriteTo {
        const prototype: {
        };

    }

    namespace show {
        const prototype: {
        };

    }

}

export namespace getMaxListeners {
    const prototype: {
    };

}

export namespace listenerCount {
    const prototype: {
    };

}

export namespace listeners {
    const prototype: {
    };

}

export namespace newGroup {
    const prototype: {
    };

}

export namespace newItem {
    const prototype: {
    };

}

export namespace newStream {
    const prototype: {
    };

}

export namespace on {
    const prototype: {
    };

}

export namespace once {
    const prototype: {
    };

}

export namespace pause {
    const prototype: {
    };

}

export namespace prependListener {
    const prototype: {
    };

}

export namespace prependOnceListener {
    const prototype: {
    };

}

export namespace removeAllListeners {
    const prototype: {
    };

}

export namespace removeListener {
    const prototype: {
    };

}

export namespace resume {
    const prototype: {
    };

}

export namespace setGaugeTemplate {
    const prototype: {
    };

}

export namespace setGaugeThemeset {
    const prototype: {
    };

}

export namespace setMaxListeners {
    const prototype: {
    };

}

export namespace stream {
    const allowHalfOpen: boolean;

    const bufferSize: number;

    const bytesRead: number;

    const bytesWritten: number;

    const columns: number;

    const connecting: boolean;

    const destroyed: boolean;

    const domain: any;

    const fd: number;

    const isTTY: boolean;

    const localAddress: any;

    const localPort: any;

    const readable: boolean;

    const readyState: string;

    const remoteAddress: any;

    const remoteFamily: any;

    const remotePort: any;

    const rows: number;

    const server: any;

    const writable: boolean;

    function addListener(ev: any, fn: any): any;

    function address(): any;

    function clearLine(dir: any): void;

    function clearScreenDown(): void;

    function connect(options: any, cb: any, ...args: any[]): any;

    function cork(): void;

    function cursorTo(x: any, y: any): void;

    function destroy(er: any): void;

    function destroySoon(er: any): void;

    function emit(type: any, ...args: any[]): any;

    function end(data: any, encoding: any): void;

    function eventNames(): any;

    function getMaxListeners(): any;

    function getWindowSize(): any;

    function isPaused(): any;

    function listen(...args: any[]): void;

    function listenerCount(type: any): any;

    function listeners(type: any): any;

    function moveCursor(dx: any, dy: any): void;

    function on(ev: any, fn: any): any;

    function once(type: any, listener: any): any;

    function pause(): any;

    function pipe(dest: any, pipeOpts: any): any;

    function prependListener(type: any, listener: any): any;

    function prependOnceListener(type: any, listener: any): any;

    function push(chunk: any, encoding: any): any;

    function read(n: any): any;

    function ref(): any;

    function removeAllListeners(type: any, ...args: any[]): any;

    function removeListener(type: any, listener: any): any;

    function resume(): any;

    function setDefaultEncoding(encoding: any): any;

    function setEncoding(enc: any): any;

    function setKeepAlive(setting: any, msecs: any): any;

    function setMaxListeners(n: any): any;

    function setNoDelay(enable: any): any;

    function setTimeout(msecs: any, callback: any): any;

    function uncork(): void;

    function unpipe(dest: any): any;

    function unref(): any;

    function unshift(chunk: any): any;

    function wrap(stream: any, ...args: any[]): any;

    function write(chunk: any, encoding: any, cb: any, ...args: any[]): any;

    namespace addListener {
        const prototype: {
        };

    }

    namespace address {
        const prototype: {
        };

    }

    namespace clearLine {
        const prototype: {
        };

    }

    namespace clearScreenDown {
        const prototype: {
        };

    }

    namespace connect {
        const prototype: {
        };

    }

    namespace cork {
        const prototype: {
        };

    }

    namespace cursorTo {
        const prototype: {
        };

    }

    namespace destroy {
        const prototype: {
        };

    }

    namespace destroySoon {
        const prototype: {
        };

    }

    namespace emit {
        const prototype: {
        };

    }

    namespace end {
        const prototype: {
        };

    }

    namespace eventNames {
        const prototype: {
        };

    }

    namespace getMaxListeners {
        const prototype: {
        };

    }

    namespace getWindowSize {
        const prototype: {
        };

    }

    namespace isPaused {
        const prototype: {
        };

    }

    namespace listen {
        const prototype: {
        };

    }

    namespace listenerCount {
        const prototype: {
        };

    }

    namespace listeners {
        const prototype: {
        };

    }

    namespace moveCursor {
        const prototype: {
        };

    }

    namespace on {
        const prototype: {
        };

    }

    namespace once {
        const prototype: {
        };

    }

    namespace pause {
        const prototype: {
        };

    }

    namespace pipe {
        const prototype: {
        };

    }

    namespace prependListener {
        const prototype: {
        };

    }

    namespace prependOnceListener {
        const prototype: {
        };

    }

    namespace push {
        const prototype: {
        };

    }

    namespace read {
        const prototype: {
        };

    }

    namespace ref {
        const prototype: {
        };

    }

    namespace removeAllListeners {
        const prototype: {
        };

    }

    namespace removeListener {
        const prototype: {
        };

    }

    namespace resume {
        const prototype: {
        };

    }

    namespace setDefaultEncoding {
        const prototype: {
        };

    }

    namespace setEncoding {
        const prototype: {
        };

    }

    namespace setKeepAlive {
        const prototype: {
        };

    }

    namespace setMaxListeners {
        const prototype: {
        };

    }

    namespace setNoDelay {
        const prototype: {
        };

    }

    namespace setTimeout {
        const prototype: {
        };

    }

    namespace uncork {
        const prototype: {
        };

    }

    namespace unpipe {
        const prototype: {
        };

    }

    namespace unref {
        const prototype: {
        };

    }

    namespace unshift {
        const prototype: {
        };

    }

    namespace wrap {
        const prototype: {
        };

    }

    namespace write {
        const prototype: {
        };

    }

}

export namespace tracker {
    const completion: {
    };

    const domain: any;

    const finished: boolean;

    const id: number;

    const name: any;

    const parentGroup: any;

    const totalWeight: number;

    const trackers: any[];

    const weight: {
    };

    function addListener(type: any, listener: any): any;

    function addUnit(unit: any, weight: any): any;

    function bubbleChange(name: any, completed: any, tracker: any): void;

    function completed(): any;

    function debug(depth: any): any;

    function emit(type: any, ...args: any[]): any;

    function eventNames(): any;

    function finish(): void;

    function getMaxListeners(): any;

    function listenerCount(type: any): any;

    function listeners(type: any): any;

    function nameInTree(): any;

    function newGroup(name: any, weight: any): any;

    function newItem(name: any, todo: any, weight: any): any;

    function newStream(name: any, todo: any, weight: any): any;

    function on(type: any, listener: any): any;

    function once(type: any, listener: any): any;

    function prependListener(type: any, listener: any): any;

    function prependOnceListener(type: any, listener: any): any;

    function removeAllListeners(type: any, ...args: any[]): any;

    function removeListener(type: any, listener: any): any;

    function setMaxListeners(n: any): any;

    namespace addListener {
        const prototype: {
        };

    }

    namespace addUnit {
        const prototype: {
        };

    }

    namespace bubbleChange {
        const prototype: {
        };

    }

    namespace completed {
        const prototype: {
        };

    }

    namespace debug {
        const prototype: {
        };

    }

    namespace emit {
        const prototype: {
        };

    }

    namespace eventNames {
        const prototype: {
        };

    }

    namespace finish {
        const prototype: {
        };

    }

    namespace getMaxListeners {
        const prototype: {
        };

    }

    namespace listenerCount {
        const prototype: {
        };

    }

    namespace listeners {
        const prototype: {
        };

    }

    namespace nameInTree {
        const prototype: {
        };

    }

    namespace newGroup {
        const prototype: {
        };

    }

    namespace newItem {
        const prototype: {
        };

    }

    namespace newStream {
        const prototype: {
        };

    }

    namespace on {
        const prototype: {
        };

    }

    namespace once {
        const prototype: {
        };

    }

    namespace prependListener {
        const prototype: {
        };

    }

    namespace prependOnceListener {
        const prototype: {
        };

    }

    namespace removeAllListeners {
        const prototype: {
        };

    }

    namespace removeListener {
        const prototype: {
        };

    }

    namespace setMaxListeners {
        const prototype: {
        };

    }

}

export namespace useColor {
    const prototype: {
    };

}

export namespace write {
    const prototype: {
    };

}

